{"ast":null,"code":"var _jsxFileName = \"/home/guilhem/Git/jeu-des-plis/src/components/GameRoom/GameRoom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { socket } from '../../socket';\nimport Table from '../Table/Table';\nimport ScoreBoard from '../ScoreBoard/ScoreBoard';\nimport AnnouncementModal from '../AnnouncementModal/AnnouncementModal';\nimport MancheDetails from '../MancheDetails/MancheDetails';\nimport GameDetails from '../GameDetails/GameDetails';\nimport './GameRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameRoom() {\n  _s();\n  var _gameState$atout;\n  const {\n    gameId\n  } = useParams();\n  const location = useLocation();\n  const {\n    playerName,\n    localPlayerId\n  } = location.state || {};\n  const [players, setPlayers] = useState([]);\n  const [gameState, setGameState] = useState({\n    isStarted: false,\n    atout: null,\n    demandedCouleur: null\n  });\n  const [manche, setManche] = useState(1);\n  const [hand, setHand] = useState([]);\n  const [cardsPlayed, setCardsPlayed] = useState([]);\n  const [isAnnouncementModalOpen, setIsAnnouncementModalOpen] = useState(false);\n  const [announcements, setAnnouncements] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const playersRef = useRef(players);\n  useEffect(() => {\n    playersRef.current = players;\n  }, [players]);\n\n  // --- Handle Socket Events on Component Mount ---\n  useEffect(() => {\n    if (!gameId || !playerName) {\n      console.error('Game ID or player name is missing.');\n      return;\n    }\n\n    // Join the game once on component mount\n    socket.emit('joinGame', {\n      gameId,\n      playerName\n    });\n\n    // Event Handlers\n    const handleUpdatePlayers = playersList => setPlayers(playersList);\n    const handleDealCards = cards => setHand(cards);\n    const handleUpdateGameState = state => setGameState(prevState => ({\n      ...prevState,\n      ...state\n    }));\n    const handleUpdateManche = ({\n      manche\n    }) => setManche(manche);\n\n    // Register event listeners\n    socket.on('updatePlayers', handleUpdatePlayers);\n    socket.on('dealCards', handleDealCards);\n    socket.on('updateGameState', handleUpdateGameState);\n    socket.on('updateManche', handleUpdateManche);\n\n    // Cleanup listeners on unmount\n    return () => {\n      socket.off('updatePlayers', handleUpdatePlayers);\n      socket.off('dealCards', handleDealCards);\n      socket.off('updateGameState', handleUpdateGameState);\n      socket.off('updateManche', handleUpdateManche);\n    };\n  }, [gameId, playerName]);\n\n  // --- Handle Card Play and Trick Management ---\n  useEffect(() => {\n    const handleCardPlayed = ({\n      playerId,\n      card\n    }) => {\n      const player = playersRef.current.find(p => p.playerId === playerId);\n      if (player) {\n        setCardsPlayed(prevCards => [...prevCards, {\n          playerId,\n          card\n        }]);\n      }\n    };\n    const handleNextTurn = ({\n      currentPlayerId\n    }) => {\n      setCurrentPlayerId(currentPlayerId);\n    };\n    const handleInvalidMove = ({\n      message\n    }) => {\n      alert(message);\n    };\n    const handleStartRound = ({\n      currentPlayerId\n    }) => {\n      setCurrentPlayerId(currentPlayerId);\n      setCardsPlayed([]);\n      setAnnouncements([]);\n    };\n    const handleTrickWon = ({\n      winnerPlayerId,\n      winningCard\n    }) => {\n      console.log(`Player ${winnerPlayerId} won the trick with`, winningCard);\n\n      // Delay clearing the played cards for 2 seconds to display the last card\n      setTimeout(() => {\n        setCardsPlayed([]);\n      }, 2000); // ðŸ§¹ Clear the played cards after the delay\n    };\n\n    // Register event listeners\n    socket.on('cardPlayed', handleCardPlayed);\n    socket.on('nextTurn', handleNextTurn);\n    socket.on('invalidMove', handleInvalidMove);\n    socket.on('startRound', handleStartRound);\n    socket.on('trickWon', handleTrickWon);\n\n    // Cleanup listeners on unmount\n    return () => {\n      socket.off('cardPlayed', handleCardPlayed);\n      socket.off('nextTurn', handleNextTurn);\n      socket.off('invalidMove', handleInvalidMove);\n      socket.off('startRound', handleStartRound);\n      socket.off('trickWon', handleTrickWon);\n    };\n  }, []);\n\n  // --- Handle Announcements Phase ---\n  useEffect(() => {\n    const handleAnnouncementTurn = ({\n      playerId\n    }) => {\n      if (playerId === socket.id) {\n        setIsAnnouncementModalOpen(true);\n      }\n    };\n    const handleAnnouncementMade = ({\n      playerId,\n      announcedTricks\n    }) => {\n      setPlayers(prevPlayers => prevPlayers.map(player => player.playerId === playerId ? {\n        ...player,\n        announcedTricks\n      } : player));\n      setAnnouncements(prev => [...prev, {\n        playerId,\n        announcedTricks\n      }]);\n      if (playerId === socket.id) {\n        setIsAnnouncementModalOpen(false);\n      }\n    };\n    const handleInvalidAnnouncement = ({\n      message\n    }) => {\n      alert(message);\n      setIsAnnouncementModalOpen(true);\n    };\n    socket.on('announcementTurn', handleAnnouncementTurn);\n    socket.on('announcementMade', handleAnnouncementMade);\n    socket.on('invalidAnnouncement', handleInvalidAnnouncement);\n    return () => {\n      socket.off('announcementTurn', handleAnnouncementTurn);\n      socket.off('announcementMade', handleAnnouncementMade);\n      socket.off('invalidAnnouncement', handleInvalidAnnouncement);\n    };\n  }, []);\n\n  // --- Player Actions ---\n  const playCard = card => {\n    if (currentPlayerId !== socket.id) {\n      alert(\"Ce n'est pas votre tour de jouer.\");\n      return;\n    }\n    socket.emit('playCard', {\n      gameId,\n      card\n    });\n    setHand(prevHand => prevHand.filter(c => c.valeur !== card.valeur || c.couleur !== card.couleur));\n  };\n  const startGame = () => {\n    socket.emit('startGame', {\n      gameId\n    });\n  };\n  const handleAnnounce = announcedTricks => {\n    socket.emit('makeAnnouncement', {\n      gameId,\n      announcedTricks\n    });\n  };\n\n  // --- Render Game Components ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-room\",\n    children: [/*#__PURE__*/_jsxDEV(MancheDetails, {\n      manche: manche,\n      atout: gameState.atout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameDetails, {\n      gameId: gameId,\n      players: players\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreboard-container\",\n      children: /*#__PURE__*/_jsxDEV(ScoreBoard, {\n        players: players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), gameState.isStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        players: players,\n        cardsPlayed: cardsPlayed,\n        hand: hand,\n        onPlayCard: playCard,\n        currentPlayerId: currentPlayerId,\n        localPlayerId: localPlayerId,\n        atout: (_gameState$atout = gameState.atout) === null || _gameState$atout === void 0 ? void 0 : _gameState$atout.couleur,\n        demandedCouleur: gameState.demandedCouleur,\n        manche: manche\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waiting-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"En attente que la partie commence...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        children: \"D\\xE9marrer la partie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AnnouncementModal, {\n      isOpen: isAnnouncementModalOpen,\n      onAnnounce: handleAnnounce,\n      totalPlayers: players.length,\n      manche: manche,\n      announcements: announcements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(GameRoom, \"GmSv8I3IRyV4fqJSeduzG/uLNbM=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = GameRoom;\nexport default GameRoom;\nvar _c;\n$RefreshReg$(_c, \"GameRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useLocation","socket","Table","ScoreBoard","AnnouncementModal","MancheDetails","GameDetails","jsxDEV","_jsxDEV","GameRoom","_s","_gameState$atout","gameId","location","playerName","localPlayerId","state","players","setPlayers","gameState","setGameState","isStarted","atout","demandedCouleur","manche","setManche","hand","setHand","cardsPlayed","setCardsPlayed","isAnnouncementModalOpen","setIsAnnouncementModalOpen","announcements","setAnnouncements","currentPlayerId","setCurrentPlayerId","playersRef","current","console","error","emit","handleUpdatePlayers","playersList","handleDealCards","cards","handleUpdateGameState","prevState","handleUpdateManche","on","off","handleCardPlayed","playerId","card","player","find","p","prevCards","handleNextTurn","handleInvalidMove","message","alert","handleStartRound","handleTrickWon","winnerPlayerId","winningCard","log","setTimeout","handleAnnouncementTurn","id","handleAnnouncementMade","announcedTricks","prevPlayers","map","prev","handleInvalidAnnouncement","playCard","prevHand","filter","c","valeur","couleur","startGame","handleAnnounce","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPlayCard","onClick","isOpen","onAnnounce","totalPlayers","length","_c","$RefreshReg$"],"sources":["/home/guilhem/Git/jeu-des-plis/src/components/GameRoom/GameRoom.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { socket } from '../../socket';\nimport Table from '../Table/Table';\nimport ScoreBoard from '../ScoreBoard/ScoreBoard';\nimport AnnouncementModal from '../AnnouncementModal/AnnouncementModal';\nimport MancheDetails from '../MancheDetails/MancheDetails';\nimport GameDetails from '../GameDetails/GameDetails';\nimport './GameRoom.css';\n\nfunction GameRoom() {\n  const { gameId } = useParams();\n  const location = useLocation();\n  const { playerName, localPlayerId } = location.state || {};\n\n  const [players, setPlayers] = useState([]);\n  const [gameState, setGameState] = useState({ isStarted: false, atout: null, demandedCouleur: null });\n  const [manche, setManche] = useState(1);\n  const [hand, setHand] = useState([]);\n  const [cardsPlayed, setCardsPlayed] = useState([]);\n\n  const [isAnnouncementModalOpen, setIsAnnouncementModalOpen] = useState(false);\n  const [announcements, setAnnouncements] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n\n  const playersRef = useRef(players);\n\n  useEffect(() => {\n    playersRef.current = players;\n  }, [players]);\n\n  // --- Handle Socket Events on Component Mount ---\n  useEffect(() => {\n    if (!gameId || !playerName) {\n      console.error('Game ID or player name is missing.');\n      return;\n    }\n\n    // Join the game once on component mount\n    socket.emit('joinGame', { gameId, playerName });\n\n    // Event Handlers\n    const handleUpdatePlayers = (playersList) => setPlayers(playersList);\n    const handleDealCards = (cards) => setHand(cards);\n    const handleUpdateGameState = (state) => setGameState((prevState) => ({ ...prevState, ...state }));\n    const handleUpdateManche = ({ manche }) => setManche(manche);\n\n    // Register event listeners\n    socket.on('updatePlayers', handleUpdatePlayers);\n    socket.on('dealCards', handleDealCards);\n    socket.on('updateGameState', handleUpdateGameState);\n    socket.on('updateManche', handleUpdateManche);\n\n    // Cleanup listeners on unmount\n    return () => {\n      socket.off('updatePlayers', handleUpdatePlayers);\n      socket.off('dealCards', handleDealCards);\n      socket.off('updateGameState', handleUpdateGameState);\n      socket.off('updateManche', handleUpdateManche);\n    };\n  }, [gameId, playerName]);\n\n  // --- Handle Card Play and Trick Management ---\n  useEffect(() => {\n    const handleCardPlayed = ({ playerId, card }) => {\n      const player = playersRef.current.find((p) => p.playerId === playerId);\n      if (player) {\n        setCardsPlayed((prevCards) => [...prevCards, { playerId, card }]);\n      }\n    };\n\n    const handleNextTurn = ({ currentPlayerId }) => {\n      setCurrentPlayerId(currentPlayerId);\n    };\n\n    const handleInvalidMove = ({ message }) => {\n      alert(message);\n    };\n\n    const handleStartRound = ({ currentPlayerId }) => {\n      setCurrentPlayerId(currentPlayerId);\n      setCardsPlayed([]);\n      setAnnouncements([]);\n    };\n\n    const handleTrickWon = ({ winnerPlayerId, winningCard }) => {\n      console.log(`Player ${winnerPlayerId} won the trick with`, winningCard);\n\n      // Delay clearing the played cards for 2 seconds to display the last card\n      setTimeout(() => { setCardsPlayed([]); }, 2000); // ðŸ§¹ Clear the played cards after the delay\n    };\n\n    // Register event listeners\n    socket.on('cardPlayed', handleCardPlayed);\n    socket.on('nextTurn', handleNextTurn);\n    socket.on('invalidMove', handleInvalidMove);\n    socket.on('startRound', handleStartRound);\n    socket.on('trickWon', handleTrickWon);\n\n    // Cleanup listeners on unmount\n    return () => {\n      socket.off('cardPlayed', handleCardPlayed);\n      socket.off('nextTurn', handleNextTurn);\n      socket.off('invalidMove', handleInvalidMove);\n      socket.off('startRound', handleStartRound);\n      socket.off('trickWon', handleTrickWon);\n    };\n  }, []);\n\n  // --- Handle Announcements Phase ---\n  useEffect(() => {\n    const handleAnnouncementTurn = ({ playerId }) => {\n      if (playerId === socket.id) { setIsAnnouncementModalOpen(true); }\n    };\n\n    const handleAnnouncementMade = ({ playerId, announcedTricks }) => {\n      setPlayers((prevPlayers) =>\n        prevPlayers.map((player) =>\n          player.playerId === playerId ? { ...player, announcedTricks } : player\n        )\n      );\n      setAnnouncements((prev) => [...prev, { playerId, announcedTricks }]);\n      if (playerId === socket.id) { setIsAnnouncementModalOpen(false); }\n    };\n\n    const handleInvalidAnnouncement = ({ message }) => {\n      alert(message);\n      setIsAnnouncementModalOpen(true);\n    };\n\n    socket.on('announcementTurn', handleAnnouncementTurn);\n    socket.on('announcementMade', handleAnnouncementMade);\n    socket.on('invalidAnnouncement', handleInvalidAnnouncement);\n\n    return () => {\n      socket.off('announcementTurn', handleAnnouncementTurn);\n      socket.off('announcementMade', handleAnnouncementMade);\n      socket.off('invalidAnnouncement', handleInvalidAnnouncement);\n    };\n  }, []);\n\n  // --- Player Actions ---\n  const playCard = (card) => {\n    if (currentPlayerId !== socket.id) {\n      alert(\"Ce n'est pas votre tour de jouer.\");\n      return;\n    }\n    socket.emit('playCard', { gameId, card });\n    setHand((prevHand) => prevHand.filter((c) => c.valeur !== card.valeur || c.couleur !== card.couleur));\n  };\n\n  const startGame = () => {\n    socket.emit('startGame', { gameId });\n  };\n\n  const handleAnnounce = (announcedTricks) => {\n    socket.emit('makeAnnouncement', { gameId, announcedTricks });\n  };\n\n  // --- Render Game Components ---\n  return (\n    <div className=\"game-room\">\n      {/* Manche Details (Top Left) */}\n      <MancheDetails manche={manche} atout={gameState.atout} />\n\n      {/* Game Details (Top Right) */}\n      <GameDetails gameId={gameId} players={players} />\n\n      {/* ScoreBoard (Bottom Left) */}\n      <div className=\"scoreboard-container\">\n        <ScoreBoard players={players} />\n      </div>\n\n      {/* Game Area */}\n      {gameState.isStarted ? (\n        <div className=\"table-container\">\n          <Table\n            players={players}\n            cardsPlayed={cardsPlayed}\n            hand={hand}\n            onPlayCard={playCard}\n            currentPlayerId={currentPlayerId}\n            localPlayerId={localPlayerId}\n            atout={gameState.atout?.couleur}\n            demandedCouleur={gameState.demandedCouleur}\n            manche={manche}\n          />\n        </div>\n      ) : (\n        <div className=\"waiting-area\">\n          <p>En attente que la partie commence...</p>\n          <button onClick={startGame}>DÃ©marrer la partie</button>\n        </div>\n      )}\n\n      {/* Announcement Modal */}\n      <AnnouncementModal\n        isOpen={isAnnouncementModalOpen}\n        onAnnounce={handleAnnounce}\n        totalPlayers={players.length}\n        manche={manche}\n        announcements={announcements}\n      />\n    </div>\n  );\n}\n\nexport default GameRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}