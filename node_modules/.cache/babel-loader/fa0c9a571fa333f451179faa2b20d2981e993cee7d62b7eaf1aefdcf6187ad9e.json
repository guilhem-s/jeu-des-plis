{"ast":null,"code":"var _jsxFileName = \"/home/guilhem/Git/jeu-des-plis/src/components/Table/Table.jsx\";\n// Table.js\nimport React from 'react';\nimport './Table.css';\nimport Card from '../Card/Card';\nimport PlayerHand from '../PlayerHand/PlayerHand';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table({\n  players,\n  cardsPlayed,\n  hand,\n  currentPlayerId,\n  localPlayerId,\n  onPlayCard,\n  atout,\n  demandedCouleur,\n  manche\n}) {\n  const orderedPlayers = reorderPlayers(players, localPlayerId);\n\n  // DerniÃ¨re carte jouÃ©e\n  const getLastPlayedCard = playerId => {\n    const playerCard = cardsPlayed.find(entry => entry.playerId === playerId);\n    return playerCard ? playerCard.card : null;\n  };\n  const getRemainingCards = (playerId, manche) => {\n    const cardsPlayedByPlayer = cardsPlayed.filter(card => card.playerId === playerId).length;\n    return Math.max(0, manche - cardsPlayedByPlayer); // Le nombre total de cartes - cartes jouÃ©es\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table\",\n    children: orderedPlayers.map((player, index) => {\n      const isCurrentPlayer = player.playerId === currentPlayerId;\n      const isLocalPlayer = player.playerId === localPlayerId;\n      const positionStyles = getPlayerPositionStyle(index, orderedPlayers.length);\n\n      // âœ… Utilise la valeur de manche pour dÃ©terminer les cartes restantes\n      const remainingCards = getRemainingCards(player.playerId, manche);\n\n      // âœ… Main affichÃ©e : vraies cartes pour le joueur local, dos de cartes pour les autres\n      const playerHand = isLocalPlayer ? hand : Array.from({\n        length: remainingCards\n      }, () => ({\n        valeur: 'verso',\n        couleur: 'carte'\n      }));\n      console.log(`Hand for ${player.name}:`, playerHand); // âœ… VÃ©rification dans la console\n\n      const lastPlayedCard = getLastPlayedCard(player.playerId);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `player-hand-container ${isCurrentPlayer ? 'current-player' : ''}`,\n        style: positionStyles,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"played-card-box\",\n          children: lastPlayedCard ? /*#__PURE__*/_jsxDEV(Card, {\n            card: lastPlayedCard,\n            isPlayable: false,\n            isGrayed: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-card-box\",\n            children: \"\\uD83C\\uDCA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-name\",\n          children: player.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PlayerHand, {\n          hand: playerHand,\n          onPlayCard: isCurrentPlayer && isLocalPlayer ? onPlayCard : null,\n          isCurrentPlayer: isCurrentPlayer && isLocalPlayer,\n          isLocalPlayer: isLocalPlayer,\n          atout: atout,\n          demandedCouleur: demandedCouleur\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, player.playerId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n// RÃ©organise les joueurs\n_c = Table;\nfunction reorderPlayers(players, localPlayerId) {\n  const localIndex = players.findIndex(p => p.playerId === localPlayerId);\n  if (localIndex === -1) return players;\n  return [...players.slice(localIndex), ...players.slice(0, localIndex)];\n}\n\n/**\n * Retourne un style de positionnement pour un joueur donnÃ© en fonction de son index (aprÃ¨s rÃ©org)\n * et du nombre total de joueurs.\n * \n * Index 0 : bas, centrÃ©, pas de rotation\n * Pour 2 joueurs:\n *   - Index 1 : haut, rotation 180Â°\n * Pour 3 joueurs:\n *   - Index 1 : gauche, rotation 90Â°\n *   - Index 2 : droite, rotation -90Â°\n * Pour 4 joueurs:\n *   - Index 1 : gauche, rotation 90Â°\n *   - Index 2 : haut, rotation -90Â°\n *   - Index 3 : droite, rotation -90Â°\n */\n\n// Position des joueurs autour de la table\nfunction getPlayerPositionStyle(index, numPlayers) {\n  const baseStyle = {\n    position: 'absolute',\n    transformOrigin: 'center center'\n  };\n  if (numPlayers === 2) {\n    return index === 0 ? {\n      ...baseStyle,\n      bottom: '5%',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    } : {\n      ...baseStyle,\n      top: '5%',\n      left: '50%',\n      transform: 'translateX(-50%) rotate(180deg)'\n    };\n  }\n  if (numPlayers === 3) {\n    if (index === 1) return {\n      ...baseStyle,\n      left: '5%',\n      top: '50%',\n      transform: 'translateY(-50%) rotate(90deg)'\n    };\n    if (index === 2) return {\n      ...baseStyle,\n      right: '5%',\n      top: '50%',\n      transform: 'translateY(-50%) rotate(-90deg)'\n    };\n  }\n  if (numPlayers === 4) {\n    if (index === 1) return {\n      ...baseStyle,\n      left: '5%',\n      top: '50%',\n      transform: 'translateY(-50%) rotate(90deg)'\n    };\n    if (index === 2) return {\n      ...baseStyle,\n      top: '5%',\n      left: '50%',\n      transform: 'translateX(-50%) rotate(180deg)'\n    };\n    if (index === 3) return {\n      ...baseStyle,\n      right: '5%',\n      top: '50%',\n      transform: 'translateY(-50%) rotate(-90deg)'\n    };\n  }\n  return {\n    ...baseStyle,\n    bottom: '5%',\n    left: '50%',\n    transform: 'translateX(-50%)'\n  };\n}\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","Card","PlayerHand","jsxDEV","_jsxDEV","Table","players","cardsPlayed","hand","currentPlayerId","localPlayerId","onPlayCard","atout","demandedCouleur","manche","orderedPlayers","reorderPlayers","getLastPlayedCard","playerId","playerCard","find","entry","card","getRemainingCards","cardsPlayedByPlayer","filter","length","Math","max","className","children","map","player","index","isCurrentPlayer","isLocalPlayer","positionStyles","getPlayerPositionStyle","remainingCards","playerHand","Array","from","valeur","couleur","console","log","name","lastPlayedCard","style","isPlayable","isGrayed","fileName","_jsxFileName","lineNumber","columnNumber","_c","localIndex","findIndex","p","slice","numPlayers","baseStyle","position","transformOrigin","bottom","left","transform","top","right","$RefreshReg$"],"sources":["/home/guilhem/Git/jeu-des-plis/src/components/Table/Table.jsx"],"sourcesContent":["// Table.js\nimport React from 'react';\nimport './Table.css';\nimport Card from '../Card/Card';\nimport PlayerHand from '../PlayerHand/PlayerHand';\n\nfunction Table({ players, cardsPlayed, hand, currentPlayerId, localPlayerId, onPlayCard, atout, demandedCouleur, manche }) {\n  const orderedPlayers = reorderPlayers(players, localPlayerId);\n\n  // DerniÃ¨re carte jouÃ©e\n  const getLastPlayedCard = (playerId) => {\n    const playerCard = cardsPlayed.find((entry) => entry.playerId === playerId);\n    return playerCard ? playerCard.card : null;\n  };\n\n  const getRemainingCards = (playerId, manche) => {\n        const cardsPlayedByPlayer = cardsPlayed.filter(card => card.playerId === playerId).length;\n        return Math.max(0, manche - cardsPlayedByPlayer);  // Le nombre total de cartes - cartes jouÃ©es\n      };\n\n  return (\n    <div className=\"table\">\n      {orderedPlayers.map((player, index) => {\n        const isCurrentPlayer = player.playerId === currentPlayerId;\n        const isLocalPlayer = player.playerId === localPlayerId;\n        const positionStyles = getPlayerPositionStyle(index, orderedPlayers.length);\n\n        // âœ… Utilise la valeur de manche pour dÃ©terminer les cartes restantes\n        const remainingCards = getRemainingCards(player.playerId, manche);\n\n        // âœ… Main affichÃ©e : vraies cartes pour le joueur local, dos de cartes pour les autres\n        const playerHand = isLocalPlayer\n          ? hand\n          : Array.from({ length: remainingCards }, () => ({ valeur: 'verso', couleur: 'carte' }));\n\n        console.log(`Hand for ${player.name}:`, playerHand);  // âœ… VÃ©rification dans la console\n\n        const lastPlayedCard = getLastPlayedCard(player.playerId);\n\n        return (\n          <div\n            key={player.playerId}\n            className={`player-hand-container ${isCurrentPlayer ? 'current-player' : ''}`}\n            style={positionStyles}\n          >\n            {/* Carte jouÃ©e */}\n            <div className=\"played-card-box\">\n              {lastPlayedCard ? (\n                <Card card={lastPlayedCard} isPlayable={false} isGrayed={false} />\n              ) : (\n                <div className=\"empty-card-box\">ðŸ‚ </div>\n              )}\n            </div>\n\n            <div className=\"player-name\">{player.name}</div>\n\n            {/* âœ… Passage correct de la main */}\n            <PlayerHand\n              hand={playerHand}\n              onPlayCard={isCurrentPlayer && isLocalPlayer ? onPlayCard : null}\n              isCurrentPlayer={isCurrentPlayer && isLocalPlayer}\n              isLocalPlayer={isLocalPlayer}\n              atout={atout}\n              demandedCouleur={demandedCouleur}\n            />\n          </div>\n        );\n      })}\n\n    </div>\n  );\n}\n\n// RÃ©organise les joueurs\nfunction reorderPlayers(players, localPlayerId) {\n  const localIndex = players.findIndex((p) => p.playerId === localPlayerId);\n  if (localIndex === -1) return players;\n\n  return [\n    ...players.slice(localIndex),\n    ...players.slice(0, localIndex),\n  ];\n}\n\n/**\n * Retourne un style de positionnement pour un joueur donnÃ© en fonction de son index (aprÃ¨s rÃ©org)\n * et du nombre total de joueurs.\n * \n * Index 0 : bas, centrÃ©, pas de rotation\n * Pour 2 joueurs:\n *   - Index 1 : haut, rotation 180Â°\n * Pour 3 joueurs:\n *   - Index 1 : gauche, rotation 90Â°\n *   - Index 2 : droite, rotation -90Â°\n * Pour 4 joueurs:\n *   - Index 1 : gauche, rotation 90Â°\n *   - Index 2 : haut, rotation -90Â°\n *   - Index 3 : droite, rotation -90Â°\n */\n\n// Position des joueurs autour de la table\nfunction getPlayerPositionStyle(index, numPlayers) {\n  const baseStyle = {\n    position: 'absolute',\n    transformOrigin: 'center center',\n  };\n\n  if (numPlayers === 2) {\n    return index === 0\n      ? { ...baseStyle, bottom: '5%', left: '50%', transform: 'translateX(-50%)' }\n      : { ...baseStyle, top: '5%', left: '50%', transform: 'translateX(-50%) rotate(180deg)' };\n  }\n\n  if (numPlayers === 3) {\n    if (index === 1) return { ...baseStyle, left: '5%', top: '50%', transform: 'translateY(-50%) rotate(90deg)' };\n    if (index === 2) return { ...baseStyle, right: '5%', top: '50%', transform: 'translateY(-50%) rotate(-90deg)' };\n  }\n\n  if (numPlayers === 4) {\n    if (index === 1) return { ...baseStyle, left: '5%', top: '50%', transform: 'translateY(-50%) rotate(90deg)' };\n    if (index === 2) return { ...baseStyle, top: '5%', left: '50%', transform: 'translateX(-50%) rotate(180deg)' };\n    if (index === 3) return { ...baseStyle, right: '5%', top: '50%', transform: 'translateY(-50%) rotate(-90deg)' };\n  }\n\n  return { ...baseStyle, bottom: '5%', left: '50%', transform: 'translateX(-50%)' };\n}\n\nexport default Table;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}